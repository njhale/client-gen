package informergen

const factoryTmpl = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.PackageName}}

`

const genericTmpl = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.PackageName}}
`

const groupInterfaceTmpl = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.PackageName}}
`

const versionInterfaceTmpl = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.PackageName}}

import "{{.InformerPath}}/{{.Group}}/{{.Version}}"

type Interface interface {
{{ range .APIs -}}
  {{.Name}}s() {{.Name}}Informer
{{ end -}}
}

type version struct {
	delegate {{.Version}}.Interface
}

func New(delegate {{.Version}}.Interface) Interface {
	return &version{delegate: delegate}
}

{{ range .APIs -}}
func (v *version) {{.Name}}s() {{.Name}}Informer {
	return &{{.NameLowerFirst}}Informer{
		delegate: v.delegate.{{.Name}}s(),
	}
}
{{ end -}}
`

const informerTmpl = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.PackageName}}
`
